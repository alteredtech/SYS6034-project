---
title: "SYS6034-Proj"
format: pdf
editor: visual
---

```{r}
library(tidymodels)  # functions for ML
library(tidyverse)   # functions for data manipulation
library(ggplot2)
library(purrr)
library(fitdistrplus)
library(dplyr)

data_dir = "./kaggle"
image_dir = "./images"
# Create the image folder if it doesn't exist
if (!dir.exists(image_dir)) {
  dir.create(image_dir)
}
ev_charge_path <- file.path(data_dir, "ev_charging_patterns.csv")
ev_charge_patterns <- read_csv(ev_charge_path, show_col_types = FALSE)
```

```{r}
# Cleans data where there might be NA, charge % is above or below 0-100%
data_clean <- ev_charge_patterns %>% 
  drop_na() %>% # Drop NA
  filter(
    `State of Charge (End %)` <= 100, # Drop charges over 100%
    `State of Charge (Start %)` > 0) # Drop any charges that might be below 0%
```

```{r}
# Factors the user and charge types
data_clean <- data_clean %>%
  mutate(
    charger_type = factor(`Charger Type`, levels = c("Level 1", "Level 2", "DC Fast Charger")),
    user_type = factor(`User Type`, levels = c("Casual Driver", "Commuter", "Long-Distance Traveler")),
    charger_type_num = as.numeric(charger_type),
    driver_type_num = as.numeric(user_type)
  )
```

```{r}
# Swaps any charge state where start is larger than the end value. This is probably an issue with the creators simulation
sum(data_clean$`State of Charge (Start %)` > data_clean$`State of Charge (End %)`)
data_clean <- data_clean %>%
  mutate(
    soc_start_fixed = if_else(`State of Charge (Start %)` > `State of Charge (End %)`, `State of Charge (End %)`, `State of Charge (Start %)`),
    soc_end_fixed   = if_else(`State of Charge (Start %)` > `State of Charge (End %)`, `State of Charge (Start %)`, `State of Charge (End %)`)
  ) %>%
  dplyr::select(-`State of Charge (Start %)`, -`State of Charge (End %)`) %>%
  rename(
    `State of Charge (Start %)` = soc_start_fixed,
    `State of Charge (End %)` = soc_end_fixed
  )
```

```{r}
# Creates a difference of charge based on the battery capacity to get a charge difference
data_clean <- data_clean %>%
  mutate(
    start_kw = (`State of Charge (Start %)` / 100) * `Battery Capacity (kWh)`,
    end_kw   = (`State of Charge (End %)` / 100) * `Battery Capacity (kWh)`,
    charge_diff = end_kw - start_kw
  )
```

```{r}
# Fix start times
data_clean <- data_clean %>%
  mutate(`Charging Start Time` = `Charging End Time` - lubridate::dhours(`Charging Duration (hours)`))
```

```{r}
# Charging efficiency
data_clean <- data_clean %>%
  mutate(efficiency_kwh_per_hr = charge_diff / `Charging Duration (hours)`)
```

```{r}
# Arrival rate grouping
data_clean <- data_clean %>%
  mutate(hour = lubridate::hour(`Charging Start Time`))
```

# User Types

## Arrivals by Hour

```{r}
arrival_by_hour_user <- data_clean %>%
  mutate(hour = floor_date(`Charging Start Time`, unit = "hour")) %>%
  count(`User Type`, hour)

ggplot(arrival_by_hour_user, aes(x = hour, y = n)) +
  geom_line(color = "black") +
  labs(
    title = "Hourly EV Arrivals of all User Type",
    x = "Hour",
    y = "Number of Arrivals"
  ) +
  theme_minimal() +
  theme(strip.text = element_text(face = "bold"))

ggsave(
  filename = file.path(image_dir, "hourly_arrivals_of_all_users.png"),  # Name of the saved file
  plot = last_plot(),  # The plot you just created
  width = 8,           # Width of the plot (in inches)
  height = 6,          # Height of the plot (in inches)
  dpi = 300            # Resolution of the plot (in dpi)
)
```

## Interarrival times

```{r}
data_clean <- data_clean %>%
  arrange(`User Type`, `Charging Start Time`) %>%
  group_by(`User Type`) %>%
  mutate(interarrival_time = as.numeric(difftime(`Charging Start Time`, lag(`Charging Start Time`), units = "mins"))) %>%
  ungroup()

data_plot <- data_clean %>%
  filter(!is.na(interarrival_time), is.finite(interarrival_time), interarrival_time > 0)
```

### Individual

```{r}
iqr <- IQR(data_plot$interarrival_time, na.rm = TRUE)
n <- sum(!is.na(data_plot$interarrival_time))
bw_int_user <- 2 * iqr / (n^(1/3))

ggplot(data_plot, aes(x = interarrival_time)) +
  geom_histogram(binwidth = bw_int_user, fill = "gray") +
  facet_wrap(~ `User Type`, scales = "free_y") +
  labs(
    title = "Histogram of Interarrival Times by User Type",
    x = "Interarrival Time (minutes)",
    y = "Count"
  ) +
  theme_minimal()

ggsave(
  filename = file.path(image_dir, "histogram_count_interarrival_times_by_user.png"),  # Name of the saved file
  plot = last_plot(),  # The plot you just created
  width = 8,           # Width of the plot (in inches)
  height = 6,          # Height of the plot (in inches)
  dpi = 300            # Resolution of the plot (in dpi)
)
```

```{r}
fit_distributions <- function(x) {
  fits <- list(
    exponential = fitdist(x, "exp"),
    lognormal   = fitdist(x, "lnorm"),
    gamma       = fitdist(x, "gamma"),
    weibull     = fitdist(x, "weibull")
  )
  aics <- sapply(fits, function(f) f$aic)
  best_name <- names(which.min(aics))
  best_fit <- fits[[best_name]]
  
  list(best_dist = best_name, params = best_fit$estimate)
}

```

```{r}
ggplot(data_clean, aes(x = interarrival_time)) +
  geom_histogram(aes(y = ..density..), binwidth = bw_int_user, fill = "gray") +
  geom_density(color = "black", size = 1) +
  facet_wrap(~ `User Type`, scales = "free_y") +
  labs(
    title = "Interarrival Time Density by User Type",
    x = "Interarrival Time (minutes)",
    y = "Density"
  ) +
  theme_minimal()

ggsave(
  filename = file.path(image_dir, "interarrival_time_density_user.png"),  # Name of the saved file
  plot = last_plot(),  # The plot you just created
  width = 8,           # Width of the plot (in inches)
  height = 6,          # Height of the plot (in inches)
  dpi = 300            # Resolution of the plot (in dpi)
)
```

```{r}
distribution_fits <- data_plot %>%
  group_by(`User Type`) %>%
  summarise(fit = list(fit_distributions(interarrival_time)), .groups = "drop") %>%
  unnest_wider(fit)
```

```{r}
# Create a density grid
density_data <- data_plot %>%
  group_by(`User Type`) %>%
  summarise(x_vals = list(seq(min(interarrival_time), max(interarrival_time), length.out = 500)), .groups = "drop") %>%
  left_join(distribution_fits, by = "User Type") %>%
  rowwise() %>%
  mutate(
    y_vals = list({
      x <- x_vals
      p <- params
      switch(best_dist,
             exponential = dexp(x, rate = 1 / p["rate"]),
             lognormal   = dlnorm(x, meanlog = p["meanlog"], sdlog = p["sdlog"]),
             gamma       = dgamma(x, shape = p["shape"], rate = p["rate"]),
             weibull     = dweibull(x, shape = p["shape"], scale = p["scale"])
      )
    })
  ) %>%
  unnest(c(x_vals, y_vals))
```

```{r}
ggplot(data_plot, aes(x = interarrival_time)) +
  geom_histogram(aes(y = ..density..), binwidth = bw_int_user, fill = "skyblue", color = "white") +
  geom_line(data = density_data, aes(x = x_vals, y = y_vals, color = best_dist), size = 1) +
  facet_wrap(~ `User Type`, scales = "free_y") +
  labs(
    title = "Fitted Distribution Densities on Interarrival Times",
    x = "Interarrival Time (minutes)",
    y = "Density",
    color = "Best Fit"
  ) +
  theme_minimal()

ggsave(
  filename = file.path(image_dir, "fitted_best_distribution_densities_interarrival_user.png"),  # Name of the saved file
  plot = last_plot(),  # The plot you just created
  width = 8,           # Width of the plot (in inches)
  height = 6,          # Height of the plot (in inches)
  dpi = 300            # Resolution of the plot (in dpi)
)
```

### Combined

```{r}
interarrival_all <- data_clean %>%
  arrange(`Charging Start Time`) %>%
  mutate(interarrival_time = as.numeric(difftime(`Charging Start Time`, lag(`Charging Start Time`), units = "mins"))) %>%
  filter(!is.na(interarrival_time), is.finite(interarrival_time), interarrival_time > 0)

best_fit_all <- fit_distributions(interarrival_all$interarrival_time)
best_fit_all
```

```{r}
x_vals <- seq(min(interarrival_all$interarrival_time), max(interarrival_all$interarrival_time), length.out = 500)

y_vals <- switch(best_fit_all$best_dist,
  exponential = dexp(x_vals, rate = 1 / best_fit_all$params["rate"]),
  lognormal   = dlnorm(x_vals, meanlog = best_fit_all$params["meanlog"], sdlog = best_fit_all$params["sdlog"]),
  gamma       = dgamma(x_vals, shape = best_fit_all$params["shape"], rate = best_fit_all$params["rate"]),
  weibull     = dweibull(x_vals, shape = best_fit_all$params["shape"], scale = best_fit_all$params["scale"])
)

density_df <- data.frame(x_vals = x_vals, y_vals = y_vals)
```

```{r}
ggplot(interarrival_all, aes(x = interarrival_time)) +
  geom_histogram(aes(y = ..density..), binwidth = 5, fill = "lightgray", color = "darkgray") +
  geom_line(data = density_df, aes(x = x_vals, y = y_vals), color = "black", size = 1) +
  labs(
    title = paste0("Overall Interarrival Time Distribution (Best Fit: ", best_fit_all$best_dist, ")"),
    x = "Interarrival Time (minutes)",
    y = "Density"
  ) +
  theme_minimal()

ggsave(
  filename = file.path(image_dir, "overall_interarrival_time_distribution.png"),  # Name of the saved file
  plot = last_plot(),  # The plot you just created
  width = 8,           # Width of the plot (in inches)
  height = 6,          # Height of the plot (in inches)
  dpi = 300            # Resolution of the plot (in dpi)
)
```

## Poisson rate

```{r}
lambda_estimate <- 1 / mean(interarrival_all$interarrival_time)
lambda_estimate

lambda_per_hour <- lambda_estimate * 60
lambda_per_hour
```

# Charger Types

# Hourly Arrivals

```{r}
arrival_by_charger_hour <- data_clean %>%
  mutate(hour = floor_date(`Charging Start Time`, unit = "hour")) %>%
  count(`Charger Type`, hour)

ggplot(arrival_by_charger_hour, aes(x = hour, y = n)) +
  geom_line(color = "black") +
  labs(
    title = "Hourly EV Arrivals of all Charger Type",
    x = "Hour",
    y = "Number of Arrivals"
  ) +
  theme_minimal() +
  theme(strip.text = element_text(face = "bold"))

ggsave(
  filename = file.path(image_dir, "hourly_arrivals_all_charger_types.png"),  # Name of the saved file
  plot = last_plot(),  # The plot you just created
  width = 8,           # Width of the plot (in inches)
  height = 6,          # Height of the plot (in inches)
  dpi = 300            # Resolution of the plot (in dpi)
)
```

## Charge efficiency

```{r}
data_clean <- data_clean %>%
  mutate(efficiency_kwh_per_hr = charge_diff / `Charging Duration (hours)`)

iqr <- IQR(data_clean$efficiency_kwh_per_hr, na.rm = TRUE)
n <- sum(!is.na(data_clean$efficiency_kwh_per_hr))
bw_charge_efficiency <- 2 * iqr / (n^(1/3))
```

### Individual

```{r}
ggplot(data_clean, aes(x = efficiency_kwh_per_hr)) +
  geom_histogram(binwidth = bw_charge_efficiency, fill = "gray", color = "black") +
  facet_wrap(~ `Charger Type`, scales = "free_y") +
  labs(
    title = "Charging Efficiency per Session (Faceted by Charger Type)",
    x = "Efficiency (kWh per hour)",
    y = "Count"
  ) +
  theme_minimal()
ggsave(
  filename = file.path(image_dir, "charging_efficiency_individual.png"),  # Name of the saved file
  plot = last_plot(),  # The plot you just created
  width = 8,           # Width of the plot (in inches)
  height = 6,          # Height of the plot (in inches)
  dpi = 300            # Resolution of the plot (in dpi)
)
```

### Combined

```{r}
ggplot(data_clean, aes(x = efficiency_kwh_per_hr)) +
  geom_histogram(binwidth = bw_charge_efficiency, fill = "gray", color = "black") +
  labs(title = "Charging Efficiency (kWh per hour)", x = "Efficiency", y = "Count") +
  theme_minimal()

ggsave(
  filename = file.path(image_dir, "charging_efficiency.png"),  # Name of the saved file
  plot = last_plot(),  # The plot you just created
  width = 8,           # Width of the plot (in inches)
  height = 6,          # Height of the plot (in inches)
  dpi = 300            # Resolution of the plot (in dpi)
)
```

## Service rate

```{r}
mu_estimate <- 1 / mean(data_clean$`Charging Duration (hours)`)
mu_estimate

mu_per_min <- mu_estimate / 60
```

## Utilization

```{r}
rho <- lambda_per_hour / mu_estimate
rho
```








```{r}
# Charger type and charge rate
# find a good bin width
iqr <- IQR(data_clean$`Charging Rate (kW)`, na.rm = TRUE)
n <- sum(!is.na(data_clean$`Charging Rate (kW)`))
binwidth_fd_rate <- 2 * iqr / (n^(1/3))

binwidth <- binwidth_fd_rate

rate_binned <- data_clean %>%
  mutate(bin = cut(`Charging Rate (kW)`, breaks = seq(floor(min(`Charging Rate (kW)`, na.rm = TRUE)), 
                                                      ceiling(max(`Charging Rate (kW)`, na.rm = TRUE)), 
                                                      by = binwidth))) %>%
  group_by(`Charger Type`, bin) %>%
  summarise(count = n(), .groups = "drop")

# Get max count per charger type for label placement
max_counts <- rate_binned %>%
  group_by(`Charger Type`) %>%
  summarise(y_pos = max(count), .groups = "drop")

rate_means_labeled <- rate_means %>%
  left_join(max_counts, by = "Charger Type") %>%
  mutate(label = paste0("Mean = ", round(mean_rate, 1)))

data_clean %>%
  ggplot(aes(x = `Charging Rate (kW)`)) +
  geom_histogram(binwidth = binwidth_fd_rate, fill = "gray", color = "white") +
  geom_vline(data = rate_means_labeled, aes(xintercept = mean_rate), color = "black", linetype = "dashed", size = 1) +
  geom_text(
    data = rate_means_labeled,
    aes(x = mean_rate, y = y_pos, label = label),
    vjust = -0.5, hjust = -0.25,
    color = "black", size = 3
  ) +
  facet_wrap(~ `Charger Type`, scales = "free_y") +
  labs(
    title = "Charging Rate by Charger Type (with Mean Line and Label)",
    x = "Charging Rate (kW)",
    y = "Count"
  ) +
  theme_minimal()

ggsave(
  filename = file.path(image_dir, "charging_rate_by_charger_type.png"),  # Name of the saved file
  plot = last_plot(),  # The plot you just created
  width = 8,           # Width of the plot (in inches)
  height = 6,          # Height of the plot (in inches)
  dpi = 300            # Resolution of the plot (in dpi)
)
```

